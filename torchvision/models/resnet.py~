# 2018.10.05 22:26
# 

import torch.nn as nn
import torch.nn.functional as F
import math
import torch.utils.model_zoo as model_zoo
import torch
from .MPNCOV.python import MPNCOV

__all__ = ['ResNet', 'resnet18', 'resnet34', 'resnet23', 'resnet26', 'resnet50', 'resnet101',
           'resnet152']


model_urls = {
    'resnet18': 'https://download.pytorch.org/models/resnet18-5c106cde.pth',
    'resnet34': 'https://download.pytorch.org/models/resnet34-333f7ec4.pth',
    'resnet50': 'https://download.pytorch.org/models/resnet50-19c8e357.pth',
    'resnet101': 'https://download.pytorch.org/models/resnet101-5d3b4d8f.pth',
    'resnet152': 'https://download.pytorch.org/models/resnet152-b121ed2d.pth',
}


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride,
                     padding=1, bias=False)

def cov_feature(x):
    batchsize = x.data.shape[0]
    dim = x.data.shape[1]
    h = x.data.shape[2]
    w = x.data.shape[3]
    M = h*w
    x = x.reshape(batchsize,dim,M)
    I_hat = (-1./M/M)*torch.ones(dim,dim,device = x.device) + (1./dim)*torch.eye(dim,dim,device = x.device)
    I_hat = I_hat.view(1,dim,dim).repeat(batchsize,1,1).type(x.dtype)
    y = (x.transpose(1,2)).bmm(I_hat).bmm(x)
    return y

def som_feature(x):
    batchsize = x.data.shape[0]
    dim = x.data.shape[1]
    h = x.data.shape[2]
    w = x.data.shape[3]
    M = h*w
    x = x.reshape(batchsize,dim,M)
    y = (x.transpose(1,2)).bmm(x)
    return y


'''
def brown_cov_pool(A, dtype):
  batchSize = A.data.shape[0]
  dim = A.data.shape[1]
  M = A.data.shape[2]
  dM1 = torch.ones(dim,M).view(1, dim, M).
               repeat(batchSize,1,1).type(dtype)
  Md1 = torch.ones(M,dim).view(1, M, dim).
               repeat(batchSize,1,1).type(dtype)
  MM1 = torch.ones(M,M).view(1, M, M).
               repeat(batchSize,1,1).type(dtype)
  M11 = torch.ones(M,1).view(1, M, 1).
               repeat(batchSize,1,1).type(dtype)
  M11T = torch.ones(1,M).view(1, 1, M).
               repeat(batchSize,1,1).type(dtype)
  A_t = torch.transpose(A, 1, 2)
  A_ = A_t.mul(A_t).bmm(dM1) + Md1.bmm(A.mul(A)) - 2*A_t.bmm(A)
  #B = A_.sqrt()
  A_ = A_ + 1e-5
  B = A_.sqrt()
  C = B - (1./M)*B.bmm(MM1) - (1./M)*MM1.bmm(B) + (1./(M*M))*M11T.bmm(B.bmm(M11)).mul(MM1)
  sA = (1./(M*M))*C.bmm(C)
  return sA
'''
class BasicBlock(nn.Module):
    expansion = 1

    def __init__(self, inplanes, planes, stride=1, downsample=None):
        super(BasicBlock, self).__init__()
        self.conv1 = conv3x3(inplanes, planes, stride)
        self.bn1 = nn.BatchNorm2d(planes)
        self.relu = nn.ReLU(inplace=True)
        self.conv2 = conv3x3(planes, planes)
        self.bn2 = nn.BatchNorm2d(planes)
        self.downsample = downsample
        self.stride = stride

    def forward(self, x):
        residual = x

        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)

        out = self.conv2(out)
        out = self.bn2(out)

        if self.downsample is not None:
            residual = self.downsample(x)

        out += residual
        out = self.relu(out)

        return out

'''
class Bottleneck(nn.Module):
    expansion = 4

    def __init__(self, inplanes, planes, stride=1, downsample=None):
        super(Bottleneck, self).__init__()
        self.conv1 = nn.Conv2d(inplanes, planes, kernel_size=1, bias=False)
        self.bn1 = nn.BatchNorm2d(planes)
        self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=stride,
                               padding=1, bias=False)
        self.bn2 = nn.BatchNorm2d(planes)
        self.conv3 = nn.Conv2d(planes, planes * self.expansion, kernel_size=1, bias=False)
        self.bn3 = nn.BatchNorm2d(planes * self.expansion)
        self.relu = nn.ReLU(inplace=True)
        self.downsample = downsample
        self.stride = stride

    def forward(self, x):
        residual = x

        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)

        out = self.conv2(out)
        out = self.bn2(out)
        out = self.relu(out)

        out = self.conv3(out)
        out = self.bn3(out)

        if self.downsample is not None:
            residual = self.downsample(x)

        out += residual
        out = self.relu(out)

        return out
'''
class Bottleneck(nn.Module):
    expansion = 4

    def __init__(self, inplanes, planes, stride=1, downsample=None, attention='0', att_dim=128):
        super(Bottleneck, self).__init__()
        self.dimDR = att_dim
        self.conv1 = nn.Conv2d(inplanes, planes, kernel_size=1, bias=False)
        self.bn1 = nn.BatchNorm2d(planes)
        self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=stride,
                               padding=1, bias=False)
        self.bn2 = nn.BatchNorm2d(planes)
        self.conv3 = nn.Conv2d(planes, planes * self.expansion, kernel_size=1, bias=False)
        self.bn3 = nn.BatchNorm2d(planes * self.expansion)
        self.relu = nn.ReLU(inplace=True)
        self.relu_normal = nn.ReLU(inplace=False)
        if attention is not '0' and attention is not '2':
            if planes > 64:
                DR_stride=1
            else:
                DR_stride=2
            self.channel_pre_relu_att = True # change the location of attention
            self.ch_dim = 128
            self.conv_for_DR = nn.Conv2d(planes * self.expansion, self.ch_dim, kernel_size=1,stride=DR_stride, bias=True)
            self.bn_for_DR = nn.BatchNorm2d(self.ch_dim)

            self.row_bn = nn.BatchNorm2d(self.ch_dim)
            self.row_conv_group = nn.Conv2d(self.ch_dim, 4*self.ch_dim, kernel_size=(self.ch_dim, 1), groups = self.ch_dim, bias=True)
            self.leak_relu = nn.LeakyReLU(0.1)
            self.fc_adapt_channels = nn.Conv2d(4*self.ch_dim, planes * self.expansion, kernel_size=1, groups=1, bias=True)
            self.sigmoid = nn.Sigmoid()
        if attention is not '0' and attention is not '1':
            if planes > 64:
                DR_stride=1
            else:
                DR_stride=2
            self.sp_dim = 128
            self.h_ = 8
            self.w_ = 8
            self.size_ = self.h_ * self.w_
            self.conv_for_DR_spatial = nn.Conv2d(planes * self.expansion, self.sp_dim, kernel_size=1, stride=DR_stride, bias=True)
            self.bn_for_DR_spatial = nn.BatchNorm2d(self.sp_dim)

            self.adppool = nn.AdaptiveAvgPool2d((self.h_ ,self.w_ ))
            self.row_bn_for_spatial = nn.BatchNorm2d(self.size_)
            self.row_conv_group_for_spatial = nn.Conv2d(self.size_, 6*self.size_, kernel_size=(self.size_, 1), groups=self.size_, bias=True)
            self.leak_relu = nn.LeakyReLU(0.1)
            self.fc_adapt_channels_for_spatial = nn.Conv2d(6*self.size_, self.size_, kernel_size=1, groups=1, bias=True)
            self.sigmoid = nn.Sigmoid()
            self.adpunpool = F.adaptive_avg_pool2d
        if attention is 'w':
            self.groups_base = 32
            self.groups = int(planes * self.expansion / 64)
            self.factor = int(math.log(self.groups_base / self.groups, 2))
            self.padding_num = self.factor + 2
            self.conv_kernel_size = self.factor * 2 + 5
            self.dilate_conv_for_concat1 = nn.Conv2d(planes * self.expansion, planes * self.expansion, 
                                                    kernel_size=(self.conv_kernel_size,1), stride=1, padding=(self.padding_num,0),
                                                    groups=self.groups, bias=True)
            self.dilate_conv_for_concat2 = nn.Conv2d(planes * self.expansion, planes * self.expansion, 
                                                    kernel_size=(self.conv_kernel_size,1), stride=1, padding=(self.padding_num,0),
                                                    groups=self.groups, bias=True)
            self.bn_for_concat = nn.BatchNorm2d(planes * self.expansion)
        self.downsample = downsample
        self.stride = stride
        self.attention = attention

    def chan_att(self, out):
        # NxCxHxW
        out = self.relu_normal(out)
        out = self.conv_for_DR(out)
        out = self.bn_for_DR(out)

        out = MPNCOV.CovpoolLayer(out) # Nxdxd
        out = out.view(out.size(0), out.size(1), out.size(2), 1).contiguous() # Nxdxdx1

        out = self.row_bn(out)
        out = self.row_conv_group(out) # Nx512x1x1

        out = self.leak_relu(out)
        out = self.fc_adapt_channels(out) #NxCx1x1
        out = self.sigmoid(out) #NxCx1x1
        #out = out * pre_att

        return out

    def spat_att(self, out):
        pre_att = out # NxCxHxW   l = HxW
        out = self.relu_normal(out)
        out = self.conv_for_DR_spatial(out)
        out = self.bn_for_DR_spatial(out)

        out = self.adppool(out) # keep the feature map size to 14x14

        out = cov_feature(out) # Nx196x196

        out = out.view(out.size(0), out.size(1), out.size(2), 1).contiguous()  # Nx196x196x1

        out = self.row_bn_for_spatial(out)
        out = self.row_conv_group_for_spatial(out) # Nx588x1x1

        out = self.leak_relu(out)
        out = self.fc_adapt_channels_for_spatial(out) #Nx196x1x1
        out = self.sigmoid(out) 
        out = out.view(out.size(0), 1, self.h_, self.w_).contiguous()#Nx1x14x14

        out = self.adpunpool(out,(pre_att.size(2), pre_att.size(3))) # unpool Nx1xHxW
        #out = out * pre_att

        return out

    def forward(self, x):
        residual = x
        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)

        out = self.conv2(out)
        out = self.bn2(out)
        out = self.relu(out)

        out = self.conv3(out)
        out = self.bn3(out)
        if self.downsample is not None:
            residual = self.downsample(x)
        if self.attention is '1':
            pre_att = out
            att = self.chan_att(out)
            if self.channel_pre_relu_att:
                out = pre_att * att
            else:
                out = self.relu_normal(pre_att * att)

        if self.attention is '2':
            pre_att = out
            att = self.spat_att(out)
            out = self.relu_normal(pre_att * att)

        if self.attention is 'x':
            pre_att = out
            chan_att = self.chan_att(out)
            spat_att = self.spat_att(out)
            # fusion by mul
            out = pre_att * chan_att * spat_att
        if self.attention is '+':
            pre_att = out
            chan_att = self.chan_att(out)
            spat_att = self.spat_att(out)
            # fusion by adding
            out = pre_att * chan_att + self.relu(pre_att.clone() * spat_att)
        # fusion by (spatial + channel serial manner)
        if self.attention is '>':
            pre_att = out
            chan_att = self.chan_att(out)
            spat_att = self.spat_att(out)
            # fusion by max
            out = torch.max(pre_att * chan_att, self.relu(pre_att.clone() * spat_att))
        if self.attention is 'w':
            pre_att = out
            chan_att = self.chan_att(out)
            spat_att = self.spat_att(out)
            # fusion by concating
            # out = torch.cat((pre_att * chan_att, self.relu(pre_att.clone() * spat_att)),dim=3)
            # W = self.dilate_conv_for_concat.weight
            # Bs = self.dilate_conv_for_concat.bias
            # out = F.conv2d(out, W, Bs, stride=1, padding=(self.padding_num,0), dilation=(1,int(out.size(3)/2)), groups=self.groups)
            #out = self.dilate_conv_for_concat(out)
            if self.channel_pre_relu_att:
                out1 = self.dilate_conv_for_concat1(pre_att * chan_att)
            else:
                out1 = self.dilate_conv_for_concat1(self.relu(pre_att * chan_att))
            out2 = self.dilate_conv_for_concat2(self.relu(pre_att * spat_att))
            out = out1 + out2
            out = self.bn_for_concat(out)
        out += residual
        out = self.relu(out)

        return out


class ResNet(nn.Module):

    def __init__(self, block, layers, att_position, att_dim, num_classes=250):
        self.inplanes = 64
        super(ResNet, self).__init__()
        self.conv1 = nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3,
                               bias=False)
        self.bn1 = nn.BatchNorm2d(64)
        self.relu = nn.ReLU(inplace=True)
        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)
        self.layer1 = self._make_layer(block, 64, layers[0], att_position=att_position[0], att_dim=att_dim)
        self.layer2 = self._make_layer(block, 128, layers[1], stride=2, att_position=att_position[1], att_dim=att_dim)
        self.layer3 = self._make_layer(block, 256, layers[2], stride=2, att_position=att_position[2], att_dim=att_dim)
        self.layer4 = self._make_layer(block, 512, layers[3], stride=1, att_position=att_position[3], att_dim=att_dim)
        self.avgpool = nn.AvgPool2d(14, stride=1)
        self.fc = nn.Linear(512 * block.expansion, num_classes)

        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')
            elif isinstance(m, nn.BatchNorm2d):
                nn.init.constant_(m.weight, 1)
                nn.init.constant_(m.bias, 0)

    def _make_layer(self, block, planes, blocks, stride=1, att_position=[1], att_dim=128):
        downsample = None
        if stride != 1 or self.inplanes != planes * block.expansion:
            downsample = nn.Sequential(
                nn.Conv2d(self.inplanes, planes * block.expansion,
                          kernel_size=1, stride=stride, bias=False),
                nn.BatchNorm2d(planes * block.expansion),
            )

        layers = []
        layers.append(block(self.inplanes, planes, stride, downsample, att_position[0], att_dim=att_dim))
        self.inplanes = planes * block.expansion
        for i in range(1, blocks):
            layers.append(block(self.inplanes, planes, attention=att_position[i], att_dim=att_dim))
        return nn.Sequential(*layers)

    def forward(self, x):
        x = self.conv1(x)
        x = self.bn1(x)
        x = self.relu(x)
        x = self.maxpool(x)

        x = self.layer1(x)
        x = self.layer2(x)
        x = self.layer3(x)
        x = self.layer4(x)

        x = self.avgpool(x)
        x = x.view(x.size(0), -1)
        x = self.fc(x)

        return x


def resnet18(pretrained=False, att_position=[[],[],[],[]], att_dim = 128, **kwargs):
    """Constructs a ResNet-18 model.

    Args:
        pretrained (bool): If True, returns a model pre-trained on ImageNet
    """
    model = ResNet(BasicBlock, [2, 2, 2, 2], att_position, att_dim, **kwargs)
    if pretrained:
        model.load_state_dict(model_zoo.load_url(model_urls['resnet18']))
    return model


def resnet34(pretrained=False, att_position=[[],[],[],[]], att_dim = 128, **kwargs):
    """Constructs a ResNet-34 model.

    Args:
        pretrained (bool): If True, returns a model pre-trained on ImageNet
    """
    model = ResNet(BasicBlock, [3, 4, 6, 3], att_position, att_dim, **kwargs)
    if pretrained:
        model.load_state_dict(model_zoo.load_url(model_urls['resnet34']))
    return model

def resnet23(pretrained=False, att_position=[[],[],[],[]], att_dim = 128, **kwargs):
    """Constructs a ResNet-23 model.

    Args:
        pretrained (bool): If True, returns a model pre-trained on ImageNet
    """
    model = ResNet(Bottleneck, [1, 2, 2, 2], att_position, att_dim, **kwargs)
    if pretrained:
        model.load_state_dict(model_zoo.load_url(model_urls['resnet50']))
    return model

def resnet26(pretrained=False, att_position=[[],[],[],[]], att_dim = 128, **kwargs):
    """Constructs a ResNet-23 model.

    Args:
        pretrained (bool): If True, returns a model pre-trained on ImageNet
    """
    model = ResNet(Bottleneck, [2, 2, 2, 2], att_position, att_dim, **kwargs)
    if pretrained:
        model.load_state_dict(model_zoo.load_url(model_urls['resnet50']))
    return model

def resnet50(pretrained=False, att_position=[[],[],[],[]], att_dim = 128, **kwargs):
    """Constructs a ResNet-50 model.

    Args:
        pretrained (bool): If True, returns a model pre-trained on ImageNet
    """
    model = ResNet(Bottleneck, [3, 4, 6, 3], att_position, att_dim, **kwargs)
    if pretrained:
        model.load_state_dict(model_zoo.load_url(model_urls['resnet50']))
    return model


def resnet101(pretrained=False, att_position=[[],[],[],[]], att_dim = 128, **kwargs):
    """Constructs a ResNet-101 model.

    Args:
        pretrained (bool): If True, returns a model pre-trained on ImageNet
    """
    model = ResNet(Bottleneck, [3, 4, 23, 3], att_position, att_dim, **kwargs)
    if pretrained:
        model.load_state_dict(model_zoo.load_url(model_urls['resnet101']))
    return model


def resnet152(pretrained=False, att_position=[[],[],[],[]], att_dim = 128, **kwargs):
    """Constructs a ResNet-152 model.

    Args:
        pretrained (bool): If True, returns a model pre-trained on ImageNet
    """
    model = ResNet(Bottleneck, [3, 8, 36, 3], att_position, att_dim, **kwargs)
    if pretrained:
        model.load_state_dict(model_zoo.load_url(model_urls['resnet152']))
    return model
